CODE_CHANGES = getGitChanges()
pipeline {
    agent any

    stages {
        // stage('Build') {
           // steps {
             //   git : 'https://github.com/Sir-Jarvis/cicd.git'
               // sh './mvnw clean compile'
            //}
        //}
        // Launch tests
        stage('Test') {
            steps {
                sh 'make check || true' 
                junit '**/target/*.xml'
            }
        }
        
        // QUality gate analysis and check
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube')
                sh './gradlew sonarqube'
            }
        }
        stage('Quality gate') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }
        
        // Deploy main branch
        stage('Deploy DEV') {
            when {
                expression {
                    BRANCH_NAME == 'main'
                }
            }
            steps {
                // Temps d'attente de 30s
                sleep time: 30, unit: 'SECONDS'
                sh 'make publish'
            }
        }
        
        // Deploy rec branch
        stage('Deploy REC') {
            when {
                expression {
                    BRANCH_NAME == 'rec'
                }
            }
            steps {
                sh 'make publish'
            }
        }
        stage('Test Deploy DEV') {
            when {
                expression {
                    BRANCH_NAME == 'main' & currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                sh 'make check || true' 
                junit '**/target/*.xml'
            }
        }
        stage('Test Deploy REC') {
            when {
                expression {
                    BRANCH_NAME == 'rec' & currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                sh 'make check || true' 
                junit '**/target/*.xml'
            }
        }
    }
    post {
        always {
            // cleaning
        }
        success {
            // sending success email
        }
        failure {
            // sending failure email
            mail to: seneibou@ept.sn, subject: 'The Pipeline failed :('
        }
        unstable {
            // unstable email
        }
        changed {
            // change email
        }
    }
}
